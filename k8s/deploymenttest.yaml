apiVersion: apps/v1
kind: Deployment
metadata:
  # annotations:
  #   deployment.kubernetes.io/revision: '1'
  name:  banking
  labels:
    app:  banking
spec:  # thiết lập các POD do deploy quản lý
  replicas: 10
  selector:
    matchLabels:
      app: banking
  strategy:
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 3
    type: RollingUpdate
  template: #container
    metadata:
      labels:
        app:  banking
    spec:
      containers:
      - image:  quangno129/quang
        name:  banking
        resources:
          requests:
            cpu: "10m"
            memory: "10M"
        env:
          - name:  DB_SOURCE   #ten database dat trong backend
            value: "postgresql://root:523127@172.168.2.16:5432/booking?sslmode=disable"   #connect database
        ports:
        - containerPort:  8080
          name:  banking
      restartPolicy: Always
---
kind: Service
apiVersion: v1
metadata:
  name:  svc-bank  #ten service
spec:
  selector:
    app:  banking
  type:  ClusterIP
  ports:
  - name: port
    port:  8080
    targetPort:  8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: bank-ingress
  # labels:
  #   app: banking
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
  - host: api-gateway-dashboard-testing.medpro.com.vn    #ten mien truy cap
    http:
      paths:
      - pathType: Prefix
        path: /?(.*)
        backend:
          service:
            name: svc-bank    # connect xuong svc-bank
            port:
              number: 8080
  tls:
    - hosts:
      - api-gateway-dashboard-testing.medpro.com.vn
      secretName: medpro

---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdrVENDQlhtZ0F3SUJBZ0lRQndUaitMVmpSVVNRa1VLSXpIRDJjekFOQmdrcWhraUc5dzBCQVFzRkFEQloKTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVRNd01RWURWUVFERXlwUwpZWEJwWkZOVFRDQlVURk1nUkZZZ1VsTkJJRTFwZUdWa0lGTklRVEkxTmlBeU1ESXdJRU5CTFRFd0hoY05NakV3Ck56STRNREF3TURBd1doY05Nakl3T0RJNE1qTTFPVFU1V2pBYU1SZ3dGZ1lEVlFRRERBOHFMbTFsWkhCeWJ5NWoKYjIwdWRtNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNlFYdzVabWZ2R3V6TwpDTGpvU0w5VEl6eVltMkQ0OFVJVTkzTHhuRUE3bnl0L3lYQ1piZ3VBS21sdmpHZm8zR0hIUmV4dkZackR5OW1lCnVWdnRJN3VWMVh2aWYvU2RwUlFhRUVpR0hSaytEQmtTNEwzOXhPUGpMSTZTM0JHS1g0QjRDTjBNeXptOWRqU3QKcm5pMlphZEhhWlNjcjdQSEY2ZE5Vak9iU1didkdXcitZVnhPckt1dUVnL1k0aXF6RS9MNUVwZ2dFWUVvVm1nSgp2Y1dWZkMzVXBRN25sRDFtWlNFR2dNZVBaeXdJa1NVc0NvMzR0RWpBVnlWenRHWGdJZE9OZE9NY2FiVnIzK0FQCjI4TmVJNmxsd0h1L01KcTUxa3RGa1lCbjd4cEt3NFhZNWNoU1Q0ekZlYURYMCtzVkYzUGlUejlSazhrNjF1MHcKQm1BS1hCNFRBZ01CQUFHamdnT1NNSUlEampBZkJnTlZIU01FR0RBV2dCU2tqZVcrZkhua2NDTnRMaWswclNOWQozUFV4ZnpBZEJnTlZIUTRFRmdRVVJBQ1RsdUE4Z0lxbjM1U2l2SlhibnFRRHhBUXdLUVlEVlIwUkJDSXdJSUlQCktpNXRaV1J3Y204dVkyOXRMblp1Z2cxdFpXUndjbTh1WTI5dExuWnVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd2dac0dBMVVkSHdTQmt6Q0JrREJHb0VTZwpRb1pBYUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXRMMUpoY0dsa1UxTk1WRXhUUkZaU1UwRk5hWGhsClpGTklRVEkxTmpJd01qQkRRUzB4TG1OeWJEQkdvRVNnUW9aQWFIUjBjRG92TDJOeWJEUXVaR2xuYVdObGNuUXUKWTI5dEwxSmhjR2xrVTFOTVZFeFRSRlpTVTBGTmFYaGxaRk5JUVRJMU5qSXdNakJEUVMweExtTnliREErQmdOVgpIU0FFTnpBMU1ETUdCbWVCREFFQ0FUQXBNQ2NHQ0NzR0FRVUZCd0lCRmh0b2RIUndPaTh2ZDNkM0xtUnBaMmxqClpYSjBMbU52YlM5RFVGTXdnWVVHQ0NzR0FRVUZCd0VCQkhrd2R6QWtCZ2dyQmdFRkJRY3dBWVlZYUhSMGNEb3YKTDI5amMzQXVaR2xuYVdObGNuUXVZMjl0TUU4R0NDc0dBUVVGQnpBQ2hrTm9kSFJ3T2k4dlkyRmpaWEowY3k1awphV2RwWTJWeWRDNWpiMjB2VW1Gd2FXUlRVMHhVVEZORVZsSlRRVTFwZUdWa1UwaEJNalUyTWpBeU1FTkJMVEV1ClkzSjBNQWtHQTFVZEV3UUNNQUF3Z2dGL0Jnb3JCZ0VFQWRaNUFnUUNCSUlCYndTQ0FXc0JhUUIyQUNsNXZ2Q2UKT1RraDhGWnpuMk9sZCtXK1YzMmNZQXI0K1UxZEpsd2xYY2VFQUFBQmV1cjRvTWdBQUFRREFFY3dSUUlnZXd1SQpCVVpWdlR5S3crQWNpYVFReWVBUGUrMCtibG9KakZjOW9pSlBZekFDSVFEU2srQzNVWklmOUZsYVlQUXlOUE9TCjE2ODBoWm9OaE5QdjhHb2tnbVVockFCM0FGR2pzUFg5QVhtY1ZtMjROM2lQREtSNnpCc255L2VlaUVLYURmN1UKaXdYbEFBQUJldXI0b09vQUFBUURBRWd3UmdJaEFMSGc4SkJvTDJuOFQvS3B0MGNqb2VkTldSa2ovSVVjM2RWYwozUnVRS0Z4NkFpRUF4TjJxOE9BVnFqK1BZakM5WGpCSlVFbVppR2tLTXUxeE5ROTdlQ2ZNdmNjQWRnQkJ5TXF4CjN5SkdTaERHb1RvSlFvZGVUakdMR3dQcjYwdkhhUENRWXBZRzlnQUFBWHJxK0tCb0FBQUVBd0JITUVVQ0lIdEYKemdDeks5K1hQQW42UWFscHM2SEYwMERHSERKTUJ2ZEZ4d2dsNjYxUUFpRUEvT04rb0kwSjd4VXYydlFZV2xqawozUXEvcXlrWG1xYWI1cHE0R0xWVjlaVXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQVRnNi84MzFmQW5nZldmCkRUVjN4WkpBaVlTQ0RkZFd4aHpJczMrTXZnZk5UQVZGMis2RlZaWGJ3d0ZEWGllQ25NbG5OY3RHNHF0cG1HUkwKWHVNWDgzQjVuMHBsa2pLbXovdS9uUVk3K1RXQ3FKUDhENXQwZlFDOGd3K2VKT3g4YzJpTzA4SmhkY3ZJY3VpYworS25UemxHbE9ROTVTZzhoSHU5ZCtWS0VkaTZOMTl2VUdRSnZFS3BQWW5yVjF3QkU1cXlZMGxOem5mcGYvQmtlCnNzKzVCb0plcHZHN0h2M2IvdlBOUGQvTk9zS1BITU5RT1JZczV2QzJWMmlhTk04RDJYeG5HZVdReWtjNUl5WVIKamg4RWpESGtJU3BRZUdCZzQ3OXFFdXJEZXhVdmVOK1ZLdzMySmNseEdJZ244WHhhOGM5Lzl6a05lVWxyZGhTWgpBNVRMNFhrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGVVRDQ0JEbWdBd0lCQWdJUUI1ZzJBNjNqbVFnaG5LQU1KN3lLYkRBTkJna3Foa2lHOXcwQkFRc0ZBREJoCk1Rc3dDUVlEVlFRR0V3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjMKZDNjdVpHbG5hV05sY25RdVkyOXRNU0F3SGdZRFZRUURFeGRFYVdkcFEyVnlkQ0JIYkc5aVlXd2dVbTl2ZENCRApRVEFlRncweU1EQTNNVFl4TWpJMU1qZGFGdzB5TXpBMU16RXlNelU1TlRsYU1Ga3hDekFKQmdOVkJBWVRBbFZUCk1SVXdFd1lEVlFRS0V3eEVhV2RwUTJWeWRDQkpibU14TXpBeEJnTlZCQU1US2xKaGNHbGtVMU5NSUZSTVV5QkUKVmlCU1UwRWdUV2w0WldRZ1UwaEJNalUySURJd01qQWdRMEV0TVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRApnZ0VQQURDQ0FRb0NnZ0VCQU5wdVExVlZtWHZabGFKbXhHVllvdEFNRnpvQXBvaGJKQWVOcHpOKzQ5TGJna3JNCkx2MnRibElJOEg0M3ZON1VGdW14VjdsSmRQd0xQMjJxYTBzVjljd0NyNlFab0dFb2JkYSs0cHVmRzBhU2ZIUUMKUWh1bGFxS3BQY1lZT1BqVHdncUpBODRBRllqOGwvSWVROG4wMVZ5Q3VyTUlIQTQ3OHRzMkc2R0d0RXgwdWNuRQpmVjJRSFVMNjRFQzJ5aDd5YmJvbzV2OG5GV1Y0bHgveGNmeG94a0ZUVm5BSVJnSHJIMnZVZE9pVjlzbE9peDN6CjVLUHMycksyYmJhY2g4U2g1R1NrZ3AySFJvUy9teTB0Q3Exdmp5TEplUDBhTndQZDNyazVPOExpZmZMZXY5aisKVUtabzB0dDBWdlRMa2RHbVNONGgxbVZZNkRuR2ZPd3AxQzVTSzBNQ0F3RUFBYU9DQWdzd2dnSUhNQjBHQTFVZApEZ1FXQkJTa2plVytmSG5rY0NOdExpazByU05ZM1BVeGZ6QWZCZ05WSFNNRUdEQVdnQlFEM2xBMVZ0Rk11MmJ3Cm8rSWJHOE9Yc2ozUlZUQU9CZ05WSFE4QkFmOEVCQU1DQVlZd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFBd05BWUlLd1lCQlFVSEFRRUVLREFtTUNRRwpDQ3NHQVFVRkJ6QUJoaGhvZEhSd09pOHZiMk56Y0M1a2FXZHBZMlZ5ZEM1amIyMHdld1lEVlIwZkJIUXdjakEzCm9EV2dNNFl4YUhSMGNEb3ZMMk55YkRNdVpHbG5hV05sY25RdVkyOXRMMFJwWjJsRFpYSjBSMnh2WW1Gc1VtOXYKZEVOQkxtTnliREEzb0RXZ000WXhhSFIwY0RvdkwyTnliRFF1WkdsbmFXTmxjblF1WTI5dEwwUnBaMmxEWlhKMApSMnh2WW1Gc1VtOXZkRU5CTG1OeWJEQ0J6Z1lEVlIwZ0JJSEdNSUhETUlIQUJnUlZIU0FBTUlHM01DZ0dDQ3NHCkFRVUZCd0lCRmh4b2RIUndjem92TDNkM2R5NWthV2RwWTJWeWRDNWpiMjB2UTFCVE1JR0tCZ2dyQmdFRkJRY0MKQWpCK0RIeEJibmtnZFhObElHOW1JSFJvYVhNZ1EyVnlkR2xtYVdOaGRHVWdZMjl1YzNScGRIVjBaWE1nWVdOagpaWEIwWVc1alpTQnZaaUIwYUdVZ1VtVnNlV2x1WnlCUVlYSjBlU0JCWjNKbFpXMWxiblFnYkc5allYUmxaQ0JoCmRDQm9kSFJ3Y3pvdkwzZDNkeTVrYVdkcFkyVnlkQzVqYjIwdmNuQmhMWFZoTUEwR0NTcUdTSWIzRFFFQkN3VUEKQTRJQkFRQWk0OXh0U091T3lnQnljeTUwcXVDVGhHNDV4SWRVQXNRQ2FYRlZSYTlhc1BhQi9qTElOWEpMM3FWOQpKMEdoMmJaTTBrNHlPTWVBTVo1N3NtUDZKa2NKaWhoT0ZsZlFhMThhbGpkK3hOYzZiK0dYNm9GY0NIR3IrZ3NFCnlQTThxdmxLR3hjNVQ1ZUhWelY2anBqcHl6bDZWRUtwYXhINmdkR1ZwUVZnamtPUjl5WTlYQVVsRm56bE9DcHEKc203cjJaVUtwRGZyaFVuVnpYMm5TTTE1WFNqNDhyVkJCQW5HSldrTFBpamxBQ2Qzc1dGTVZVaUtSejFDNVBaeQplbDJsN0ovVzRkOTlLRkxTWWdveTVHRG1BUnB3TGMvL2ZYZmtyNDBuTVk4aWJDbXhDc2pYUVRlMGZKYnRyckxMCnlXUWxrOVZEVjI5NkVJL2tRT0pOTFZFa0o1NFAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRHJ6Q0NBcGVnQXdJQkFnSVFDRHZnVnBCQ1JyR2hkV3JKV1pISFNqQU5CZ2txaGtpRzl3MEJBUVVGQURCaApNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzCmQzY3VaR2xuYVdObGNuUXVZMjl0TVNBd0hnWURWUVFERXhkRWFXZHBRMlZ5ZENCSGJHOWlZV3dnVW05dmRDQkQKUVRBZUZ3MHdOakV4TVRBd01EQXdNREJhRncwek1URXhNVEF3TURBd01EQmFNR0V4Q3pBSkJnTlZCQVlUQWxWVApNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDNkeTVrYVdkcFkyVnlkQzVqCmIyMHhJREFlQmdOVkJBTVRGMFJwWjJsRFpYSjBJRWRzYjJKaGJDQlNiMjkwSUVOQk1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTRqdmhFWExlcUtUVG8xZXFVS0tQQzNlUXlhS2w3aExPbGxzQgpDU0RNQVpPblRqQzNVL2REeEdrQVY1M2lqU0xkaHdaQUFJRUp6czRiZzcvZnpUdHhSdUxXWnNjRnMzWW5Gbzk3Cm5oNlZmZTYzU0tNSTJ0YXZlZ3c1Qm1WL1NsMGZ2QmY0cTc3dUtOZDBmM3A0bVZtRmFHNWNJekpMdjA3QTZGcHQKNDNDL2R4Qy8vQUgyaGRtb1JCQllNcWwxR05YUm9yNUg0aWRxOUpveitFa0lZSXZVWDdRNmhMK2hxa3BNZlQ3UApUMTlzZGw2Z1N6ZVJudHdpNW0zT0ZCcU9hc3YremJNVVpCZkhXeW1lTXIveTd2clRDMExVcTdkQk10b00xTy80CmdkVzdqVmcvdFJ2b1NTaWljTm94Qk4zM3NoYnlUQXBPQjZqdFNqMWV0WCtqa01Pdkp3SURBUUFCbzJNd1lUQU8KQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVBOTVRTlZiUgpUTHRtOEtQaUd4dkRsN0k5MFZVd0h3WURWUjBqQkJnd0ZvQVVBOTVRTlZiUlRMdG04S1BpR3h2RGw3STkwVlV3CkRRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFNdWNONnBJRXhJSyt0MUVuRTlTc1BUZnJnVDFlWGtJb3lRWS9Fc3IKaE1BdHVkWEgvdlRCSDFqTHVHMmNlblRubUNtckViWGpjS0NoelV5SW1aT01rWERpcXc4Y3ZwT3AvMlBWNUFkZwowNk8vblZzSjhkV080MVAwam1QNlA2ZmJ0R2JmWW1iVzBXNUJqZkl0dGVwM1NwK2RXT0lyV2NCQUkrMHRLSUpGClBubFVraWFZNElCSXFEZnY4Tlo1WUJiZXJPZ096VzZzUkJjNEwwbmE0VVUrS3JrMlU4ODZVQWIzTHVqRVYwbHMKWVNFWTFRU3RlRHdzT29CcnArdXZGUlRwMkluQnVUaHM0cEZzaXY5a3VYY2xWekRBR3lTajRkenAzMGQ4dGJRawpDQVV3N0MyOUM3OUZ2MUM1cWZQcm1BRVNyY2lJeHBnMFg0MEtQTWJwMVpXVmJkND0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdWtGOE9XWm43eHJzemdpNDZFaS9VeU04bUp0ZytQRkNGUGR5OFp4QU81OHJmOGx3Cm1XNExnQ3BwYjR4bjZOeGh4MFhzYnhXYXc4dlpucmxiN1NPN2xkVjc0bi8wbmFVVUdoQkloaDBaUGd3WkV1QzkKL2NUajR5eU9rdHdSaWwrQWVBamRETXM1dlhZMHJhNTR0bVduUjJtVW5LK3p4eGVuVFZJem0wbG03eGxxL21GYwpUcXlycmhJUDJPSXFzeFB5K1JLWUlCR0JLRlpvQ2IzRmxYd3QxS1VPNTVROVptVWhCb0RIajJjc0NKRWxMQXFOCitMUkl3RmNsYzdSbDRDSFRqWFRqSEdtMWE5L2dEOXZEWGlPcFpjQjd2ekNhdWRaTFJaR0FaKzhhU3NPRjJPWEkKVWsrTXhYbWcxOVByRlJkejRrOC9VWlBKT3RidE1BWmdDbHdlRXdJREFRQUJBb0lCQUhaTnYvVEptZnlpMG9Udgp2MXN6VWVzaHQ0eUxMT1lTZjlISGRzZ0dZam84bUttYkxwMFY2OUlsbmtEUEl2VWlmaXpQdWlTNHlVdlNRRkQwCkZYS2p2ck9tSFFFNkd3ckMzdWpMTFBXYXAvemtQRXprV1dsRjFTWG5tRXVwNHE1TWlOSTFkd3A0VHgyTFpseG4KTko5T0pCbFU4Nk11YXZkcmk4V3VENzl6dVNEbW9zcGdvSXk3T2RvWVBxNnlRdGJpS2JLRnIwb1dFRWNQZytkawp6ZnRUa1hkdXNMZkMrbk9BWHBzUzlFRUxnTnJBZ1cxSStLTU9pOUx0Sk83Y21SY05aUWRWeDVOaXBuYWR6bFUyCktLeURFMU9NdmR1M1NCb0REeHpyajRVRXJJTDVZcnRwcTZWNThXTEFRZkdFNkt2cFAweUIxQUhMbWhURFNnRTIKWDN5SFYra0NnWUVBN2N6SWFsRHpXMDZueVQvc0VsdHJPQkVQVFVLSjZldzVVdE1pdHpJSkc0RE1vMkx4dEZSbApYYTR6dlF2SktXMlR5N1NLTzQ2cUs0Mkc4eUlTVTlBZzZUcUhjMWlRUXZ2dHBaYmp0RkIwVWgxVGIxeEFGV2tVCk1pMzRiUjZ0Yzk0ZE1yZ0Z6ZWd4UFRkWXFYZGc5Um5tRTk1ak1iTkNBNXFtSDV0RzRVL1p4MmNDZ1lFQXlJTE0KTEl3OTgwK25DQlFVN1ZxaXQ5Ym0wRW13N1lkZ2RmenIvZnhxNStaUXhZKytVQ0hMQWtySHRjL3JndUk0b0hmWgpidzNOaUZhZUw5SnVzRlphM05PZ2Jid016SnJWYVJhY2dCN2M3a25yZ3ZESStuTXZJTVlDaEo1RzZUNm4wN3hFClYrd1MwVW5MTlY1Z29oUngxaWZSYUt0YWRtVVp2aFlqZmxkNnBIVUNnWUFmQnZRell3S05yRkthSUp3RnZTWGQKTitTZU9RdFRtVDNWZjdUczREdHQrajA1S0VUUE9aL01QRm1GMWc3V04vVHJ4RSt3KzZsYWEybnJPVXZZNGJRWgpta2hvRldzbFFrZThybFpoaFluWDJQbTA4djF0amJ0VDNNbW9Pek40aGNlYmdZVklXMzVwTlZwOUtoVmRoWmFPCml4cTRObUpyby9iKzhyeXAwMGhnQ3dLQmdHakJKT2hWTUh4d2JjUmpzWGM3dGUwejRneUpvMXpGTUZrVUZUcngKWit6VnYvY25IUGVDWUN4SFkwVVNabWxQeE9QWkdZalNma0d2ZHg5bTRodFFVbEl5WWd0U2hxRlNkeEpiRk5JKwp6WS9Vb0swZEhQTHp3SGh2MnByc2tnR0RrV3ltWEZKTzdKblk0c2gwRVNvOFlpalBUckZQYklpVVV6bWpHVklGClkvYU5Bb0dBYTNESzc3aWYrVTV3cVV5Y0ZLcUsyVnltTmRnV0FKaktITExLVHJaUjRaUVJLaVRmOEtzenBvNkMKR3ZWaWo4dHJ5U2hvM290dEFMUDUwek1yNWFJVHZlYzVVKzAyVFpka0Z2a003SG1HMHZWZzdBWEw2b3NiTG91SgpHN0lOeFlneEhtR2lVY1U4MXUrR3QwaWxzUkg0SGxkRXZxTEdDVGZLS2hzTitURVJZd2c9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: medpro
type: kubernetes.io/tls #?
# ---
# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
# metadata:
#   name: banking
# spec:
#   scaleTargetRef:
#     kind: ReplicaSet
#     name: banking
#   minReplicas: 2
#   maxReplicas: 3
#   targetCPUUtilizationPercentage: 50
---
# apiVersion: apps/v1
# kind: ReplicaSet
# metadata:
#   annotations:
#     deployment.kubernetes.io/desired-replicas: '10'
#     deployment.kubernetes.io/max-replicas: '13'
#     deployment.kubernetes.io/revision: '1'