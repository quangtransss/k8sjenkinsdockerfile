// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/domain/querier.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "golang/internal/model/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateOrderDetail mocks base method.
func (m *MockQuerier) CreateOrderDetail(ctx context.Context, arg domain.CreateOrderDetailParams) (domain.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderDetail", ctx, arg)
	ret0, _ := ret[0].(domain.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderDetail indicates an expected call of CreateOrderDetail.
func (mr *MockQuerierMockRecorder) CreateOrderDetail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderDetail", reflect.TypeOf((*MockQuerier)(nil).CreateOrderDetail), ctx, arg)
}

// CreateOrders mocks base method.
func (m *MockQuerier) CreateOrders(ctx context.Context, customerid int64) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", ctx, customerid)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockQuerierMockRecorder) CreateOrders(ctx, customerid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockQuerier)(nil).CreateOrders), ctx, customerid)
}

// CreateRole mocks base method.
func (m *MockQuerier) CreateRole(ctx context.Context, arg domain.CreateRoleParams) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, arg)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockQuerierMockRecorder) CreateRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockQuerier)(nil).CreateRole), ctx, arg)
}

// CreateRolePermisstion mocks base method.
func (m *MockQuerier) CreateRolePermisstion(ctx context.Context, roleid int64) (domain.RolePermisstion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermisstion", ctx, roleid)
	ret0, _ := ret[0].(domain.RolePermisstion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRolePermisstion indicates an expected call of CreateRolePermisstion.
func (mr *MockQuerierMockRecorder) CreateRolePermisstion(ctx, roleid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermisstion", reflect.TypeOf((*MockQuerier)(nil).CreateRolePermisstion), ctx, roleid)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg domain.CreateUserParams) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeleteOrderById mocks base method.
func (m *MockQuerier) DeleteOrderById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderById indicates an expected call of DeleteOrderById.
func (mr *MockQuerierMockRecorder) DeleteOrderById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderById", reflect.TypeOf((*MockQuerier)(nil).DeleteOrderById), ctx, id)
}

// DeleteOrderDetailById mocks base method.
func (m *MockQuerier) DeleteOrderDetailById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderDetailById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderDetailById indicates an expected call of DeleteOrderDetailById.
func (mr *MockQuerierMockRecorder) DeleteOrderDetailById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderDetailById", reflect.TypeOf((*MockQuerier)(nil).DeleteOrderDetailById), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, username)
}

// GetOrderDetail mocks base method.
func (m *MockQuerier) GetOrderDetail(ctx context.Context, id int64) (domain.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", ctx, id)
	ret0, _ := ret[0].(domain.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockQuerierMockRecorder) GetOrderDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockQuerier)(nil).GetOrderDetail), ctx, id)
}

// GetOrdersById mocks base method.
func (m *MockQuerier) GetOrdersById(ctx context.Context, id int64) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersById", ctx, id)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersById indicates an expected call of GetOrdersById.
func (mr *MockQuerierMockRecorder) GetOrdersById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersById", reflect.TypeOf((*MockQuerier)(nil).GetOrdersById), ctx, id)
}

// GetProductById mocks base method.
func (m *MockQuerier) GetProductById(ctx context.Context, id int64) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", ctx, id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockQuerierMockRecorder) GetProductById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockQuerier)(nil).GetProductById), ctx, id)
}

// GetRole mocks base method.
func (m *MockQuerier) GetRole(ctx context.Context, id int64) (domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockQuerierMockRecorder) GetRole(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockQuerier)(nil).GetRole), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockQuerier) GetUserByUsername(ctx context.Context, username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockQuerierMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockQuerier)(nil).GetUserByUsername), ctx, username)
}

// ListOrderDetail mocks base method.
func (m *MockQuerier) ListOrderDetail(ctx context.Context, arg domain.ListOrderDetailParams) ([]domain.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderDetail", ctx, arg)
	ret0, _ := ret[0].([]domain.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderDetail indicates an expected call of ListOrderDetail.
func (mr *MockQuerierMockRecorder) ListOrderDetail(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderDetail", reflect.TypeOf((*MockQuerier)(nil).ListOrderDetail), ctx, arg)
}

// ListOrders mocks base method.
func (m *MockQuerier) ListOrders(ctx context.Context, arg domain.ListOrdersParams) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, arg)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockQuerierMockRecorder) ListOrders(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockQuerier)(nil).ListOrders), ctx, arg)
}

// ListRole mocks base method.
func (m *MockQuerier) ListRole(ctx context.Context, arg domain.ListRoleParams) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", ctx, arg)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole.
func (mr *MockQuerierMockRecorder) ListRole(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockQuerier)(nil).ListRole), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg domain.ListUsersParams) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}
