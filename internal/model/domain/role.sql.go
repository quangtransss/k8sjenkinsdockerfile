// Code generated by sqlc. DO NOT EDIT.
// source: role.sql

package domain

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO role (
    title,
    slug,
    active,
    description
) VALUES (
  $1, $2, $3 ,$4
)
RETURNING id, title, slug, active, description, created_at, password_changed_at
`

type CreateRoleParams struct {
	Title       string         `json:"title"`
	Slug        string         `json:"slug"`
	Active      Status         `json:"active"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.queryRow(ctx, q.createRoleStmt, createRole,
		arg.Title,
		arg.Slug,
		arg.Active,
		arg.Description,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Active,
		&i.Description,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, title, slug, active, description, created_at, password_changed_at FROM role
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.queryRow(ctx, q.getRoleStmt, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Active,
		&i.Description,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const listRole = `-- name: ListRole :many
SELECT id, title, slug, active, description, created_at, password_changed_at FROM role
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRoleParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRole(ctx context.Context, arg ListRoleParams) ([]Role, error) {
	rows, err := q.query(ctx, q.listRoleStmt, listRole, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Active,
			&i.Description,
			&i.CreatedAt,
			&i.PasswordChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
