// Code generated by sqlc. DO NOT EDIT.

package domain

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createOrderDetailStmt, err = db.PrepareContext(ctx, createOrderDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrderDetail: %w", err)
	}
	if q.createOrdersStmt, err = db.PrepareContext(ctx, createOrders); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrders: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createRolePermisstionStmt, err = db.PrepareContext(ctx, createRolePermisstion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRolePermisstion: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteOrderByIdStmt, err = db.PrepareContext(ctx, deleteOrderById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderById: %w", err)
	}
	if q.deleteOrderDetailByIdStmt, err = db.PrepareContext(ctx, deleteOrderDetailById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOrderDetailById: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getOrderDetailStmt, err = db.PrepareContext(ctx, getOrderDetail); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderDetail: %w", err)
	}
	if q.getOrdersByIdStmt, err = db.PrepareContext(ctx, getOrdersById); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrdersById: %w", err)
	}
	if q.getProductByIdStmt, err = db.PrepareContext(ctx, getProductById); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductById: %w", err)
	}
	if q.getRoleStmt, err = db.PrepareContext(ctx, getRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetRole: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.listOrderDetailStmt, err = db.PrepareContext(ctx, listOrderDetail); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrderDetail: %w", err)
	}
	if q.listOrdersStmt, err = db.PrepareContext(ctx, listOrders); err != nil {
		return nil, fmt.Errorf("error preparing query ListOrders: %w", err)
	}
	if q.listRoleStmt, err = db.PrepareContext(ctx, listRole); err != nil {
		return nil, fmt.Errorf("error preparing query ListRole: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createOrderDetailStmt != nil {
		if cerr := q.createOrderDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderDetailStmt: %w", cerr)
		}
	}
	if q.createOrdersStmt != nil {
		if cerr := q.createOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrdersStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createRolePermisstionStmt != nil {
		if cerr := q.createRolePermisstionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRolePermisstionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteOrderByIdStmt != nil {
		if cerr := q.deleteOrderByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderByIdStmt: %w", cerr)
		}
	}
	if q.deleteOrderDetailByIdStmt != nil {
		if cerr := q.deleteOrderDetailByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOrderDetailByIdStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getOrderDetailStmt != nil {
		if cerr := q.getOrderDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderDetailStmt: %w", cerr)
		}
	}
	if q.getOrdersByIdStmt != nil {
		if cerr := q.getOrdersByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrdersByIdStmt: %w", cerr)
		}
	}
	if q.getProductByIdStmt != nil {
		if cerr := q.getProductByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductByIdStmt: %w", cerr)
		}
	}
	if q.getRoleStmt != nil {
		if cerr := q.getRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.listOrderDetailStmt != nil {
		if cerr := q.listOrderDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrderDetailStmt: %w", cerr)
		}
	}
	if q.listOrdersStmt != nil {
		if cerr := q.listOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOrdersStmt: %w", cerr)
		}
	}
	if q.listRoleStmt != nil {
		if cerr := q.listRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoleStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createOrderDetailStmt     *sql.Stmt
	createOrdersStmt          *sql.Stmt
	createRoleStmt            *sql.Stmt
	createRolePermisstionStmt *sql.Stmt
	createUserStmt            *sql.Stmt
	deleteOrderByIdStmt       *sql.Stmt
	deleteOrderDetailByIdStmt *sql.Stmt
	deleteUserStmt            *sql.Stmt
	getOrderDetailStmt        *sql.Stmt
	getOrdersByIdStmt         *sql.Stmt
	getProductByIdStmt        *sql.Stmt
	getRoleStmt               *sql.Stmt
	getUserByUsernameStmt     *sql.Stmt
	listOrderDetailStmt       *sql.Stmt
	listOrdersStmt            *sql.Stmt
	listRoleStmt              *sql.Stmt
	listUsersStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createOrderDetailStmt:     q.createOrderDetailStmt,
		createOrdersStmt:          q.createOrdersStmt,
		createRoleStmt:            q.createRoleStmt,
		createRolePermisstionStmt: q.createRolePermisstionStmt,
		createUserStmt:            q.createUserStmt,
		deleteOrderByIdStmt:       q.deleteOrderByIdStmt,
		deleteOrderDetailByIdStmt: q.deleteOrderDetailByIdStmt,
		deleteUserStmt:            q.deleteUserStmt,
		getOrderDetailStmt:        q.getOrderDetailStmt,
		getOrdersByIdStmt:         q.getOrdersByIdStmt,
		getProductByIdStmt:        q.getProductByIdStmt,
		getRoleStmt:               q.getRoleStmt,
		getUserByUsernameStmt:     q.getUserByUsernameStmt,
		listOrderDetailStmt:       q.listOrderDetailStmt,
		listOrdersStmt:            q.listOrdersStmt,
		listRoleStmt:              q.listRoleStmt,
		listUsersStmt:             q.listUsersStmt,
	}
}
