// Code generated by sqlc. DO NOT EDIT.
// source: orders.sql

package domain

import (
	"context"
)

const createOrders = `-- name: CreateOrders :one
INSERT INTO orders (
    customerid
) VALUES (
  $1
)
RETURNING id, customerid, created_at
`

func (q *Queries) CreateOrders(ctx context.Context, customerid int64) (Order, error) {
	row := q.queryRow(ctx, q.createOrdersStmt, createOrders, customerid)
	var i Order
	err := row.Scan(&i.ID, &i.Customerid, &i.CreatedAt)
	return i, err
}

const deleteOrderById = `-- name: DeleteOrderById :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrderById(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteOrderByIdStmt, deleteOrderById, id)
	return err
}

const getOrdersById = `-- name: GetOrdersById :one
SELECT id, customerid, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrdersById(ctx context.Context, id int64) (Order, error) {
	row := q.queryRow(ctx, q.getOrdersByIdStmt, getOrdersById, id)
	var i Order
	err := row.Scan(&i.ID, &i.Customerid, &i.CreatedAt)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customerid, created_at FROM orders
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrdersParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.query(ctx, q.listOrdersStmt, listOrders, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.Customerid, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
