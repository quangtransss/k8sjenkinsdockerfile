// Code generated by sqlc. DO NOT EDIT.
// source: orderDetail.sql

package domain

import (
	"context"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_detail (
    order_id,product_id,active,total
) VALUES (
  $1,$2,$3,$4
)
RETURNING id, order_id, product_id, active, total, created_at
`

type CreateOrderDetailParams struct {
	OrderID   int64  `json:"order_id"`
	ProductID int64  `json:"product_id"`
	Active    Status `json:"active"`
	Total     int64  `json:"total"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.queryRow(ctx, q.createOrderDetailStmt, createOrderDetail,
		arg.OrderID,
		arg.ProductID,
		arg.Active,
		arg.Total,
	)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Active,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrderDetailById = `-- name: DeleteOrderDetailById :exec
DELETE FROM order_detail WHERE id = $1
`

func (q *Queries) DeleteOrderDetailById(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteOrderDetailByIdStmt, deleteOrderDetailById, id)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT id, order_id, product_id, active, total, created_at FROM order_detail
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrderDetail(ctx context.Context, id int64) (OrderDetail, error) {
	row := q.queryRow(ctx, q.getOrderDetailStmt, getOrderDetail, id)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Active,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderDetail = `-- name: ListOrderDetail :many
SELECT id, order_id, product_id, active, total, created_at FROM order_detail
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrderDetailParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderDetail(ctx context.Context, arg ListOrderDetailParams) ([]OrderDetail, error) {
	rows, err := q.query(ctx, q.listOrderDetailStmt, listOrderDetail, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderDetail{}
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Active,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
