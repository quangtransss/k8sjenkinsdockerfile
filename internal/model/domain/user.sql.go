// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package domain

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  username,
  hashed_password,
  email,
  mobile,
  roleid
) VALUES (
  $1, $2, $3, $4 ,$5 ,$6
)
RETURNING id, full_name, created_at, username, hashed_password, email, mobile, roleid, password_change_at
`

type CreateUserParams struct {
	FullName       string `json:"full_name"`
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	Mobile         int64  `json:"mobile"`
	Roleid         int64  `json:"roleid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.FullName,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.Mobile,
		arg.Roleid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Mobile,
		&i.Roleid,
		&i.PasswordChangeAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, username)
	return err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, full_name, created_at, username, hashed_password, email, mobile, roleid, password_change_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CreatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.Mobile,
		&i.Roleid,
		&i.PasswordChangeAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, created_at, username, hashed_password, email, mobile, roleid, password_change_at FROM users
WHERE username = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CreatedAt,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.Mobile,
			&i.Roleid,
			&i.PasswordChangeAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
